{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","constants.js","Containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","style","maxWidth","alt","src","CardList","Robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","Robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","robots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23d9cbf6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        style={{ maxWidth: \"220px\" }}\n        alt=\"robot\"\n        src={`https://robohash.org/${id * 10}?150x150`}\n      />\n\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ Robots }) => {\n  return (\n    <div>\n      {Robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={Robots[i].id}\n            name={Robots[i].name}\n            email={Robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b-green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import React, { Component } from \"react\";\nimport CardList from \"../Components/CardList\";\nimport SearchBox from \"../Components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../Components/Scroll\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    Robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, Robots, isPending } = this.props;\n    const filterRobots = Robots.filter((Robot) => {\n      return Robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading ...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">robofriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList Robots={filterRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}